# Generated by Django 4.2.23 on 2025-07-02 21:43

from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 30 characters or fewer. Letters, digits and _ only.",
                        max_length=30,
                        unique=True,
                    ),
                ),
                ("display_name", models.CharField(max_length=50)),
                (
                    "bio",
                    models.TextField(
                        blank=True,
                        default="",
                        max_length=160,
                        validators=[django.core.validators.MaxLengthValidator(160)],
                    ),
                ),
                ("avatar_url", models.URLField(blank=True, null=True)),
                ("banner_url", models.URLField(blank=True, null=True)),
                ("location", models.CharField(blank=True, max_length=50, null=True)),
                ("website", models.URLField(blank=True, null=True)),
                ("followers_count", models.PositiveIntegerField(default=0)),
                ("following_count", models.PositiveIntegerField(default=0)),
                ("posts_count", models.PositiveIntegerField(default=0)),
                ("is_verified", models.BooleanField(default=False)),
                ("is_private", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "db_table": "users",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Hashtag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("usage_count", models.PositiveIntegerField(default=0)),
                ("trending_score", models.FloatField(default=0.0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "hashtags",
            },
        ),
        migrations.CreateModel(
            name="Post",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "content",
                    models.TextField(
                        max_length=280,
                        validators=[django.core.validators.MaxLengthValidator(280)],
                    ),
                ),
                (
                    "post_type",
                    models.CharField(
                        choices=[
                            ("original", "Original"),
                            ("retweet", "Retweet"),
                            ("quote_tweet", "Quote Tweet"),
                            ("reply", "Reply"),
                        ],
                        default="original",
                        max_length=20,
                    ),
                ),
                (
                    "visibility",
                    models.CharField(
                        choices=[
                            ("public", "Public"),
                            ("followers_only", "Followers Only"),
                            ("private", "Private"),
                        ],
                        default="public",
                        max_length=20,
                    ),
                ),
                ("thread_id", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "quote_comment",
                    models.TextField(
                        blank=True,
                        max_length=280,
                        null=True,
                        validators=[django.core.validators.MaxLengthValidator(280)],
                    ),
                ),
                ("likes_count", models.PositiveIntegerField(default=0)),
                ("retweets_count", models.PositiveIntegerField(default=0)),
                ("replies_count", models.PositiveIntegerField(default=0)),
                ("quote_tweets_count", models.PositiveIntegerField(default=0)),
                ("is_pinned", models.BooleanField(default=False)),
                ("is_sensitive", models.BooleanField(default=False)),
                ("language", models.CharField(default="en", max_length=10)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="posts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "original_post",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="retweets",
                        to="db.post",
                    ),
                ),
                (
                    "reply_to_post",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="replies",
                        to="db.post",
                    ),
                ),
                (
                    "reply_to_user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="mentioned_in_replies",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "posts",
            },
        ),
        migrations.CreateModel(
            name="PostHashtag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "hashtag",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="db.hashtag"
                    ),
                ),
                (
                    "post",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="db.post"
                    ),
                ),
            ],
            options={
                "db_table": "post_hashtags",
            },
        ),
        migrations.CreateModel(
            name="MediaAttachment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "media_type",
                    models.CharField(
                        choices=[
                            ("image", "Image"),
                            ("video", "Video"),
                            ("gif", "GIF"),
                        ],
                        max_length=10,
                    ),
                ),
                ("url", models.URLField()),
                ("thumbnail_url", models.URLField(blank=True, null=True)),
                ("alt_text", models.TextField(blank=True, max_length=420, null=True)),
                ("width", models.PositiveIntegerField(blank=True, null=True)),
                ("height", models.PositiveIntegerField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "post",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="media_attachments",
                        to="db.post",
                    ),
                ),
            ],
            options={
                "db_table": "media_attachments",
            },
        ),
        migrations.CreateModel(
            name="Like",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "post",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="likes",
                        to="db.post",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="likes",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "likes",
            },
        ),
        migrations.AddField(
            model_name="hashtag",
            name="posts",
            field=models.ManyToManyField(
                related_name="hashtags", through="db.PostHashtag", to="db.post"
            ),
        ),
        migrations.CreateModel(
            name="Follow",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("pending", "Pending"),
                            ("blocked", "Blocked"),
                            ("muted", "Muted"),
                        ],
                        default="active",
                        max_length=20,
                    ),
                ),
                ("notifications_enabled", models.BooleanField(default=True)),
                ("show_retweets", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "followed",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="followers_set",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "follower",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="following_set",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "follows",
            },
        ),
        migrations.AddIndex(
            model_name="posthashtag",
            index=models.Index(fields=["post"], name="post_hashta_post_id_17ab0c_idx"),
        ),
        migrations.AddIndex(
            model_name="posthashtag",
            index=models.Index(
                fields=["hashtag"], name="post_hashta_hashtag_4ff2c3_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="posthashtag",
            unique_together={("post", "hashtag")},
        ),
        migrations.AddIndex(
            model_name="post",
            index=models.Index(
                fields=["author", "-created_at"], name="posts_author__f2f966_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="post",
            index=models.Index(
                fields=["post_type", "-created_at"], name="posts_post_ty_2afc3b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="post",
            index=models.Index(
                fields=["reply_to_post"], name="posts_reply_t_15f142_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="post",
            index=models.Index(
                fields=["original_post"], name="posts_origina_f3a770_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="post",
            index=models.Index(fields=["thread_id"], name="posts_thread__6c634a_idx"),
        ),
        migrations.AddIndex(
            model_name="post",
            index=models.Index(fields=["-created_at"], name="posts_created_2e2442_idx"),
        ),
        migrations.AddIndex(
            model_name="post",
            index=models.Index(
                fields=["visibility", "-created_at"], name="posts_visibil_c2b22e_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="post",
            constraint=models.CheckConstraint(
                check=models.Q(("likes_count__gte", 0)), name="positive_likes_count"
            ),
        ),
        migrations.AddConstraint(
            model_name="post",
            constraint=models.CheckConstraint(
                check=models.Q(("retweets_count__gte", 0)),
                name="positive_retweets_count",
            ),
        ),
        migrations.AddIndex(
            model_name="mediaattachment",
            index=models.Index(fields=["post"], name="media_attac_post_id_3854ed_idx"),
        ),
        migrations.AddIndex(
            model_name="mediaattachment",
            index=models.Index(
                fields=["media_type"], name="media_attac_media_t_4ab51e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="like",
            index=models.Index(
                fields=["user", "-created_at"], name="likes_user_id_674d5a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="like",
            index=models.Index(
                fields=["post", "-created_at"], name="likes_post_id_0f443b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="like",
            index=models.Index(fields=["-created_at"], name="likes_created_22ad1e_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="like",
            unique_together={("user", "post")},
        ),
        migrations.AddIndex(
            model_name="hashtag",
            index=models.Index(fields=["name"], name="hashtags_name_33a019_idx"),
        ),
        migrations.AddIndex(
            model_name="hashtag",
            index=models.Index(
                fields=["-trending_score"], name="hashtags_trendin_e6680c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="hashtag",
            index=models.Index(
                fields=["-usage_count"], name="hashtags_usage_c_775a07_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="follow",
            index=models.Index(
                fields=["follower", "status"], name="follows_followe_c26443_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="follow",
            index=models.Index(
                fields=["followed", "status"], name="follows_followe_ba0681_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="follow",
            index=models.Index(
                fields=["created_at"], name="follows_created_95ec29_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="follow",
            constraint=models.CheckConstraint(
                check=models.Q(("follower", models.F("followed")), _negated=True),
                name="no_self_follow",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="follow",
            unique_together={("follower", "followed")},
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(fields=["username"], name="users_usernam_baeb4b_idx"),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(fields=["email"], name="users_email_4b85f2_idx"),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(
                fields=["display_name"], name="users_display_32b2ed_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(fields=["created_at"], name="users_created_6541e9_idx"),
        ),
    ]
